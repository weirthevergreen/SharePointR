usethis::use_mit_license()
devtools::document()
usethis::use_package("Microsoft365R", "Imports")
devtools::check()
devtools::document()
devtools::check()
devtools::install()
library(SharePointR)
?SharePointR
?`SharePointR-package`
?`SharePointR-package`
?SharePointR
?SharePointR
devtools::document()
devtools::check()
devtools::install()
remove.packages("SharePointR")
devtools::clean_dll()
devtools::install()
?SharePointR
remove.packages("SharePointR")
library(SharePointR)
?SharePointR
devtools::document
devtools::document()
devtools::check()
devtools::install()
?SharePointR
remove.packages("SharePointR")
devtools::document()
devtools::check()
devtools::install()
remove.packages("SharePointR")
devtools::document()
devtools::check()
devtools::install()
?SharePointR
remove.packages("SharePointR")
?SharePointR
devtools::document()
devtools::check()
devtools::check()
devtools::install()
remove.packages("SharePointR")
devtools::document()
devtools::install()
?SharePointR
remove.packages("SharePointR")
devtools::document()
devtools::install()
?SharePointR
?SharePointR
devtools::install()
?SharePointR
remove.packages("SharePointR")
library(SharePointR)
devtools::document()
devtools::check()
devtools::install()
library(SharePointR)
?SharePointR
SharePointR
?`SharePointR-package`
devtools::check()
?tidyverse
?ggplot
??ggplot
?ggplot2
devtools::install_github("weirthevergreen/SharePointR")
devtools::install_github("weirthevergreen/SharePointR", auth_token = NULL)
remotes::install_github("weirthevergreen/SharePointR")
remotes::install_github("weirthevergreen/SharePointR", auth_token = FALSE)
#' @examples
#' \dontrun{
#' # Connect to a SharePoint site
#' site <- connect_sharepoint("https://example.sharepoint.com/sites/mysite")
#'
#' # Connect with explicit tenant
#' site <- connect_sharepoint("https://example.sharepoint.com/sites/mysite", "example")
#' }
#'
#' @export
connect_sharepoint <- function(site_url, tenant, app, ...) {
message("Connecting to SharePoint site...")
if (is.null(site_url) || length(site_url) == 0 || site_url == "") {
stop("Error: site_url is required and cannot be empty")
}
if (is.null(tenant) || length(tenant) == 0 || tenant == "") {
stop("Error: tenant is required and cannot be empty")
}
if (is.null(app) || length(app) == 0 || app == "") {
stop("Error: app is required and cannot be empty")
}
# Check if user tried to pass scopes
dots <- list(...)
if ("scopes" %in% names(dots)) {
stop("Error: Custom scopes are not allowed for security compliance.")
}
# Build safe argument list
args <- list(
site_url = site_url,
tenant = tenant,
app = app,
scopes = "Sites.ReadWrite.All"
)
# Add other safe parameters (exclude blocked ones)
safe_params <- dots[!names(dots) %in% c("scopes", "site_url", "tenant", "app")]
args <- c(args, safe_params)
site <- do.call(Microsoft365R::get_sharepoint_site, args)
# List granted scopes for this app
if (!is.null(site$token$credentials$scope)) {
granted_scopes <- strsplit(site$token$credentials$scope, " ")[[1]]
message("Granted scopes: ", paste(granted_scopes, collapse = ", "))
}
return(site)
}
library(SharePointR)
install.packages("roxygen2")
library(roxygen2)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
library(SharepointR)
library(SharePointR)
sp_site_url <- "https://2050partners.sharepoint.com/sites/CRDemonstrationsExternalWorkSpace"
sp_tenant <- "2050partners"
site2050 <- connect_sharepoint(site_url = sp_site_url, tenant = sp_tenant, app = "d3f3636e-452b-4c25-9fe4-23ac46c5f1aa")
site2050$list_drives()
?sp_read_rds()
devtools::clean_dll()
devtools::document()
devtools::install()
devtools::document()
devtools::check()
